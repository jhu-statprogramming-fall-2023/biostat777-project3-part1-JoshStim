plot.title = element_text(size = 20),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))
youtube.mod %>%
select(funny, show_product_quickly, patriotic, animals, danger,
celebrity, use_sex, like_to_dislike) %>%
pivot_longer(cols = funny:use_sex,
names_to = "attribute",
values_to = "value") %>%
ggplot(aes(x = value, y = like_to_dislike, fill = attribute)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.15, alpha = 0.15, size = 1) +
stat_summary(fun = "mean", color = "white", shape = 3) +
scale_y_continuous(trans = 'log10') +
facet_wrap(~attribute) +
labs(title = "Commercial Favorability by Attribute",
subtitle = "'Celebrity' and 'Danger' are associated with greater mean commericial favorability.",
caption = "NOTE: Y-axis is on a log10 scale.",
x = "Level",
y = "Likes-to-Dislikes Ratio") +
theme_bw() +
theme(legend.position = 'none',
text = element_text(size = 15),
plot.title = element_text(size = 20),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))
youtube.mod %>%
#filter(view_count > 1000) %>%
group_by(year) %>%
mutate(lmean = 10**mean(log10(like_to_dislike), na.rm = TRUE)) %>%
ggplot(aes(x = year, y = like_to_dislike)) +
geom_point(aes(size = view_group, color = view_factor), alpha = 0.25) +
geom_smooth(method = "lm", color = "black") +
scale_y_continuous(trans = 'log10') +
scale_size(guide = "none") +
scale_colour_discrete(na.translate = F) +
labs(title = "Commercial Favorability over Time",
subtitle = "Favorability averages are relatively constant over time.",
x = "Year",
y = "Likes-to-Dislikes Ratio",
caption = "NOTE: Y-axis is on a log10 scale.",
color = "View Count") +
theme_bw() +
theme(text = element_text(size = 15),
plot.title = element_text(size = 20),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))
youtube.mod %>%
filter(!is.na(like_count)) %>%
ggplot(aes(x = fct_reorder(brand, like_to_dislike, .fun = median),
y = like_to_dislike)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(size = view_group,
color = view_factor),
alpha = 0.5,
position=position_jitter(width=0.15)) +
scale_y_continuous(trans = 'log10') +
scale_size(guide = "none") +
labs(title = "Commercial Favorability and Viewership by Brand",
subtitle = "Kia commericals had the highest average likes-to-dislikes ratio. \n Doritos had the most commericals with > 1 million views.",
x = "Brand",
y = "Likes-to-Dislikes Ratio",
color = "View Count",
caption = "NOTE: Y-axis is on a log10 scale.") +
theme_bw() +
theme(axis.text.x = element_text(size = 12, angle = -35),
text = element_text(size = 15),
plot.title = element_text(size = 20),
axis.text.y = element_text(size = 12))
youtube.mod %>%
#filter(view_count > 1000) %>%
group_by(year) %>%
mutate(lmean = 10**mean(log10(like_to_dislike), na.rm = TRUE)) %>%
ggplot(aes(x = year, y = like_to_dislike)) +
geom_point(aes(size = view_group, color = view_factor), alpha = 0.75) +
geom_smooth(method = "lm", color = "black") +
scale_y_continuous(trans = 'log10') +
scale_size(guide = "none") +
scale_colour_discrete(na.translate = F) +
labs(title = "Commercial Favorability over Time",
subtitle = "Favorability averages are relatively constant over time.",
x = "Year",
y = "Likes-to-Dislikes Ratio",
caption = "NOTE: Y-axis is on a log10 scale.",
color = "View Count") +
theme_bw() +
theme(text = element_text(size = 15),
plot.title = element_text(size = 20),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))
youtube.mod %>%
filter(!is.na(like_count)) %>%
ggplot(aes(x = fct_reorder(brand, like_to_dislike, .fun = median),
y = like_to_dislike)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(size = view_group,
color = view_factor),
alpha = 0.5,
position=position_jitter(width=0.15)) +
scale_y_continuous(trans = 'log10') +
scale_size(guide = "none") +
labs(title = "Commercial Favorability and Viewership by Brand",
subtitle = "Kia commericals had the highest average likes-to-dislikes ratio. \n Doritos had the most commericals with > 1 million views.",
x = "Brand",
y = "Likes-to-Dislikes Ratio",
color = "View Count",
caption = "NOTE: Y-axis is on a log10 scale.") +
theme_bw() +
theme(axis.text.x = element_text(size = 12, angle = -35),
text = element_text(size = 15),
plot.title = element_text(size = 20),
axis.text.y = element_text(size = 12))
youtube.mod %>%
#filter(view_count > 1000) %>%
group_by(year) %>%
mutate(lmean = 10**mean(log10(like_to_dislike), na.rm = TRUE)) %>%
ggplot(aes(x = year, y = like_to_dislike)) +
geom_point(aes(size = view_group, color = view_factor), alpha = 0.75) +
geom_smooth(method = "lm", color = "black") +
scale_y_continuous(trans = 'log10') +
scale_size(guide = "none") +
scale_colour_discrete(na.translate = F) +
labs(title = "Commercial Favorability over Time",
subtitle = "Favorability averages are relatively constant over time.",
x = "Year",
y = "Likes-to-Dislikes Ratio",
caption = "NOTE: Y-axis is on a log10 scale.",
color = "View Count") +
theme_bw() +
theme(text = element_text(size = 15),
plot.title = element_text(size = 20),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))
youtube.mod %>%
filter(!is.na(like_count)) %>%
ggplot(aes(x = fct_reorder(brand, like_to_dislike, .fun = median),
y = like_to_dislike)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(size = view_group, color = view_factor), alpha = 0.75,
position=position_jitter(width=0.15)) +
scale_y_continuous(trans = 'log10') +
scale_size(guide = "none") +
labs(title = "Commercial Favorability and Viewership by Brand",
subtitle = "Kia commericals had the highest average likes-to-dislikes ratio. \n Doritos had the most commericals with > 1 million views.",
x = "Brand",
y = "Likes-to-Dislikes Ratio",
color = "View Count",
caption = "NOTE: Y-axis is on a log10 scale.") +
theme_bw() +
theme(axis.text.x = element_text(size = 12, angle = -35),
text = element_text(size = 15),
plot.title = element_text(size = 20),
axis.text.y = element_text(size = 12))
?pivot_longer
library(tidyverse)
library(leaps)
library(forcats)
library(here)
library(gridExtra)
library(ggpmisc)
################################################################################
# Clean data frame before running model selection algo
################################################################################
youtube.subset <- youtube.mod %>%
#filter(view_count > 1000) %>%
select(year, funny, show_product_quickly, patriotic, animals, danger,
celebrity, use_sex, view_count_log10, like_to_dislike_log10) %>%
filter(!is.na(view_count_log10) & !is.na(like_to_dislike_log10))
library(tidyverse)
library(leaps)
library(forcats)
library(here)
library(gridExtra)
library(ggpmisc)
library(tidyverse)
library(leaps)
library(forcats)
library(here)
library(ggpmisc)
if (!dir.exists(here("vignettes","data"))) {
dir.create(here("vignettes", "data"))
tuesdata <- tidytuesdayR::tt_load(2021, week = 10)
youtube.raw <- tuesdata$youtube
write.csv(youtube.raw, here("vignettes", "data","youtube.csv"))
} else{
youtube.raw <- read.csv(here("vignettes", "data","youtube.csv"))
}
glimpse(youtube.raw)
size_factor <- 1/2
youtube.mod <- youtube.raw %>%
mutate(like_to_dislike = (like_count + 1) / (dislike_count + 1),
view_group = case_when(view_count > 10 ** 6 ~ (size_factor)**0,
view_count > 10 ** 5 & view_count <= 10 ** 6 ~ (size_factor)**1,
view_count > 10 ** 4 & view_count <= 10 ** 5 ~ (size_factor)**2,
view_count > 10 ** 3 & view_count <= 10 ** 4 ~ (size_factor)**3,
view_count > 0 & view_count <= 10 ** 3 ~ (size_factor)**4)) %>%
mutate(view_factor = factor(view_group),
view_count_log10 = log10(view_count),
like_to_dislike_log10 = log10(like_to_dislike))
levels(youtube.mod$view_factor) <- c("views \u2264 1,000",
"1,000 < views \u2264 10,000",
"10,000 < views \u2264 100,000",
"100,000 < views \u2264 1,000,000",
"views > 1,000,000")
youtube.attr_by_year <- split(youtube.mod, youtube.mod$year) %>%
map(function(x) summarize(x, n = n(),
funny = mean(funny),
celebrity = mean(celebrity),
use_sex = mean(use_sex),
spq = mean(show_product_quickly),
patriotic = mean(patriotic),
danger = mean(danger),
animals = mean(animals),
lltd = mean(like_to_dislike, na.rm = TRUE))) %>%
map_df(.f = ~.x, .id = "year") %>%
pivot_longer(cols = funny:animals, names_to = "attribute", values_to = "relative_prop")
youtube.attr_by_brand <- split(youtube.mod, youtube.mod$brand) %>%
map(function(x) summarize(x, n = n(),
funny = mean(funny),
celebrity = mean(celebrity),
use_sex = mean(use_sex),
spq = mean(show_product_quickly),
patriotic = mean(patriotic),
danger = mean(danger),
animals = mean(animals),
lltd = mean(like_to_dislike, na.rm = TRUE))) %>%
map_df(.f = ~.x, .id = "brand") %>%
pivot_longer(cols = funny:animals, names_to = "attribute", values_to = "relative_prop")
youtube.attr_by_year %>%
ggplot(aes(x = year, y = relative_prop, color = attribute, group = 1)) +
geom_line() +
facet_wrap(~attribute) +
labs(title = "Trends in Commercial Attribute Use over Time",
subtitle = "Use of the 'funny' and 'sex' attributes in superbowl commercials is decreasing \n over time, while the use 'celebrity' and 'patriotic' is rising.",
x = "Year",
y = "Relative Proportion",
caption = "Units on the x-axis are discrete. Line plots were used for the ease of viewing.") +
scale_x_discrete(breaks=seq(2000,2020,5)) +
theme_bw() +
theme(legend.position = "none",
text = element_text(size = 15),
plot.title = element_text(size = 20),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))
youtube.attr_by_brand %>%
ggplot(aes(x = attribute, y = brand, fill = relative_prop)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
geom_text(aes(label=round(relative_prop,2)), colour = "black", check_overlap = TRUE) +
labs(title = "Proportion of Brand's Commericials exhibiting Attribute",
subtitle = "Within brands, 'Funny' and 'Shows product quickly' (spq) are among the most \n common commercial attributes.",
x = "Commercial Attribute",
y = "Brand",
fill = "Relative Proportion",
caption = "Tile colors represent the proportion of a brand's \n commercials containing the given attribute.") +
theme_bw() +
theme(text = element_text(size = 15),
plot.title = element_text(size = 20),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))
youtube.mod %>%
select(funny, show_product_quickly, patriotic, animals, danger,
celebrity, use_sex, like_to_dislike) %>%
pivot_longer(cols = funny:use_sex,
names_to = "attribute",
values_to = "value") %>%
ggplot(aes(x = value, y = like_to_dislike, fill = attribute)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.15, alpha = 0.25, size = 1) +
stat_summary(fun = "mean", color = "white", shape = 3) +
scale_y_continuous(trans = 'log10') +
facet_wrap(~attribute) +
labs(title = "Commercial Favorability by Attribute",
subtitle = "'Celebrity' and 'Danger' are associated with greater mean commericial favorability.",
caption = "NOTE: Y-axis is on a log10 scale.",
x = "Level",
y = "Likes-to-Dislikes Ratio") +
theme_bw() +
theme(legend.position = 'none',
text = element_text(size = 15),
plot.title = element_text(size = 20),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))
youtube.mod %>%
#filter(view_count > 1000) %>%
group_by(year) %>%
mutate(lmean = 10**mean(log10(like_to_dislike), na.rm = TRUE)) %>%
ggplot(aes(x = year, y = like_to_dislike)) +
geom_point(aes(size = view_group, color = view_factor), alpha = 0.75) +
geom_smooth(method = "lm", color = "black") +
scale_y_continuous(trans = 'log10') +
scale_size(guide = "none") +
scale_colour_discrete(na.translate = F) +
labs(title = "Commercial Favorability over Time",
subtitle = "Favorability averages are relatively constant over time.",
x = "Year",
y = "Likes-to-Dislikes Ratio",
caption = "NOTE: Y-axis is on a log10 scale.",
color = "View Count") +
theme_bw() +
theme(text = element_text(size = 15),
plot.title = element_text(size = 20),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))
youtube.mod %>%
filter(!is.na(like_count)) %>%
ggplot(aes(x = fct_reorder(brand, like_to_dislike, .fun = median),
y = like_to_dislike)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(size = view_group, color = view_factor), alpha = 0.75,
position=position_jitter(width=0.15)) +
scale_y_continuous(trans = 'log10') +
scale_size(guide = "none") +
labs(title = "Commercial Favorability and Viewership by Brand",
subtitle = "Kia commericals had the highest average likes-to-dislikes ratio. \n Doritos had the most commericals with > 1 million views.",
x = "Brand",
y = "Likes-to-Dislikes Ratio",
color = "View Count",
caption = "NOTE: Y-axis is on a log10 scale.") +
theme_bw() +
theme(axis.text.x = element_text(size = 12, angle = -35),
text = element_text(size = 15),
plot.title = element_text(size = 20),
axis.text.y = element_text(size = 12))
youtube.mod %>%
#filter(view_count > 1000) %>%
ggplot(aes(x = view_count, y = like_to_dislike)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = "black") +
stat_poly_eq() +
scale_y_continuous(trans = 'log10') +
scale_x_continuous(trans = 'log10') +
labs(title = "Commerical Favorability as a Function of View Count",
subtitle = "On average, higher viewiership is associated with greater favorability.",
caption = "NOTE: Y-axis is on a log10 scale.",
x = "View Count",
y = "Likes-to-Dislikes Ratio") +
theme_bw() +
theme(text = element_text(size = 15),
plot.title = element_text(size = 20),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))
################################################################################
# Clean data frame before running model selection algo
################################################################################
youtube.subset <- youtube.mod %>%
#filter(view_count > 1000) %>%
select(year, funny, show_product_quickly, patriotic, animals, danger,
celebrity, use_sex, view_count_log10, like_to_dislike_log10) %>%
filter(!is.na(view_count_log10) & !is.na(like_to_dislike_log10))
################################################################################
# Run leaps::regsubsets to perform model selection by EXHAUSTIVE search
################################################################################
mod.subsets <- leaps::regsubsets(like_to_dislike_log10 ~.,
data = youtube.subset,
force.in = NULL, force.out = NULL,
method = "exhaustive")
################################################################################
# Plot summary of output from regsubsets
################################################################################
mod.subsets.summary <- summary(mod.subsets)
par(mfrow = c(2,2))
plot(mod.subsets.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = 'l')
plot(mod.subsets.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
points(3,mod.subsets.summary$bic[3],col="red",cex=2,pch=20)
plot(mod.subsets.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = 'l')
points(6,mod.subsets.summary$adjr2[6],col="red",cex=2,pch=20)
plot(mod.subsets.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = 'l')
points(4,mod.subsets.summary$cp[4],col="red",cex=2,pch=20)
par(mfrow = c(2,2))
plot(mod.subsets, scale = "bic")
plot(mod.subsets, scale = "r2")
plot(mod.subsets, scale = "adjr2")
plot(mod.subsets, scale = "Cp")
################################################################################
# Build best fitting model and then summarize
################################################################################
mod <- lm(like_to_dislike_log10 ~ 1 + year + view_count_log10 + factor(patriotic) + factor(animals) + factor(danger) + factor(celebrity), data = youtube.subset)
anova(mod)
summary(mod)
par(mfrow = c(2,2))
plot(mod)
mod.subsets
class(mod.subsets)
?regsubsets
?leaps
?
leaps
?regsubsets
?leaps
?regsubsets
pkgdown::build_site()
build_home_index()
library(pkgdown)
build_home_index()
?build_home
pkgdown::build_site()
################################################################################
# Clean data frame before running model selection algo
################################################################################
youtube.subset <- youtube.mod %>%
#filter(view_count > 1000) %>%
select(year, funny, show_product_quickly, patriotic, animals, danger,
celebrity, use_sex, view_count_log10, like_to_dislike_log10) %>%
filter(!is.na(view_count_log10) & !is.na(like_to_dislike_log10))
glimpse(youtube.subset)
pkgdown::build_site()
#install.packages("leaps")
library(leaps)
install.packages("leaps")
library(leaps)
install.packages("leaps")
usethis::use_pkgdown_github_pages()
pkgdown::deploy_to_branch()
usethis::use_pkgdown_github_pages()
usethis::use_github_action("pkgdown")
usethis::use_pkgdown_github_pages()
library(tidyverse)
library(leaps)
library(forcats)
library(here)
library(ggpmisc)
if (!dir.exists(here("vignettes","data","youtube.csv"))) {
dir.create(here("vignettes", "data"))
tuesdata <- tidytuesdayR::tt_load(2021, week = 10)
youtube.raw <- tuesdata$youtube
write.csv(youtube.raw, here("vignettes", "data","youtube.csv"))
} else{
youtube.raw <- read.csv(here("vignettes", "data","youtube.csv"))
}
glimpse(youtube.raw)
if (!dir.exists(here("vignettes","data","youtube.csv"))) {
dir.create(here("vignettes", "data"))
tuesdata <- tidytuesdayR::tt_load(2021, week = 10)
youtube.raw <- tuesdata$youtube
write.csv(youtube.raw, here("vignettes", "data","youtube.csv"))
} else{
youtube.raw <- read.csv(here("vignettes", "data","youtube.csv"))
}
glimpse(youtube.raw)
if (!dir.exists(here("vignettes","data","youtube.csv"))) {
dir.create(here("vignettes", "data"))
tuesdata <- tidytuesdayR::tt_load(2021, week = 10)
youtube.raw <- tuesdata$youtube
write.csv(youtube.raw, here("vignettes", "data","youtube.csv"))
} else{
youtube.raw <- read.csv(here("vignettes", "data","youtube.csv"))
}
glimpse(youtube.raw)
if (!file.exists(here("vignettes","data","youtube.csv"))) {
dir.create(here("vignettes", "data"))
tuesdata <- tidytuesdayR::tt_load(2021, week = 10)
youtube.raw <- tuesdata$youtube
write.csv(youtube.raw, here("vignettes", "data","youtube.csv"))
} else{
youtube.raw <- read.csv(here("vignettes", "data","youtube.csv"))
}
glimpse(youtube.raw)
if (!file.exists(here("vignettes","data","youtube.csv"))) {
dir.create(here("vignettes", "data"))
tuesdata <- tidytuesdayR::tt_load(2021, week = 10)
youtube.raw <- tuesdata$youtube
write.csv(youtube.raw, here("vignettes", "data","youtube.csv"))
} else{
youtube.raw <- read.csv(here("vignettes", "data","youtube.csv"))
}
glimpse(youtube.raw)
if (!file.exists(here("vignettes","data","youtube.csv"))) {
dir.create(here("vignettes", "data"))
tuesdata <- tidytuesdayR::tt_load(2021, week = 10)
youtube.raw <- tuesdata$youtube
write.csv(youtube.raw, here("vignettes", "data","youtube.csv"))
} else{
youtube.raw <- read.csv(here("vignettes", "data","youtube.csv"))
}
glimpse(youtube.raw)
if (!file.exists(here("vignettes","data","youtube.csv"))) {
dir.create(here("vignettes", "data"))
tuesdata <- tidytuesdayR::tt_load(2021, week = 10)
youtube.raw <- tuesdata$youtube
write.csv(youtube.raw, here("vignettes", "data","youtube.csv"))
} else{
youtube.raw <- read.csv(here("vignettes", "data","youtube.csv"))
}
glimpse(youtube.raw)
if (!file.exists(here("data","youtube.csv"))) {
dir.create(here("vignettes", "data"))
tuesdata <- tidytuesdayR::tt_load(2021, week = 10)
youtube.raw <- tuesdata$youtube
write.csv(youtube.raw, here("vignettes", "data","youtube.csv"))
} else{
youtube.raw <- read.csv(here("vignettes", "data","youtube.csv"))
}
glimpse(youtube.raw)
if (!file.exists(here("data","youtube.csv"))) {
dir.create(here("data"))
tuesdata <- tidytuesdayR::tt_load(2021, week = 10)
youtube.raw <- tuesdata$youtube
write.csv(youtube.raw, here("data","youtube.csv"))
} else{
youtube.raw <- read.csv(here("data","youtube.csv"))
}
glimpse(youtube.raw)
if (!file.exists(here("data","youtube.csv"))) {
dir.create(here("data"))
tuesdata <- tidytuesdayR::tt_load(2021, week = 10)
youtube.raw <- tuesdata$youtube
write.csv(youtube.raw, here("data","youtube.csv"))
} else{
youtube.raw <- read.csv(here("data","youtube.csv"))
}
glimpse(youtube.raw)
